name: DEV Release
env:
  TARGET_PLATFORMS: linux/amd64
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch, tag or SHA to checkout.'
        required: true
        default: 'main'
        type: string
      repository:
        description: 'Repository name with owner.'
        required: true
        default: 'jodevsa/wireguard-operator'
        type: string

permissions:
  contents: read
  packages: write

jobs:
  build-manager:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}
          submodules: true
  
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          tags: |
            type=sha,format=long
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/manager

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          file: ./images/manager/Dockerfile
          context: ./
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

    outputs:
      image: ${{ steps.meta.outputs.tags }}

  build-agent:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}
          submodules: true
  
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          tags: |
            type=sha,format=long
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/agent

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          file: ./images/agent/Dockerfile
          context: ./
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

    outputs:
      image: ${{ steps.meta.outputs.tags }}

  save-release:
    needs: [build-agent, build-manager]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.20

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.branch }}
          submodules: true

      - name: prepare new release
        env:
          OPERATOR_IMAGE: ${{ needs.build-manager.outputs.image }}
          WIREGUARD_IMAGE: ${{ needs.build-agent.outputs.image }}
        run : |
          printf "WIREGUARD_IMAGE: \"$WIREGUARD_IMAGE\"\nOPERATOR_IMAGE: \"$OPERATOR_IMAGE\"" > release-config.yaml
          envsubst < ./config/default/manager_auth_proxy_patch.yaml.template > ./config/default/manager_auth_proxy_patch.yaml
          make update-controller-image
          make update-installation-yaml
          mv ./release.yaml /tmp/release.yaml

      - name: upload release
        uses: actions/upload-artifact@v3
        with:
          name: release.yaml
          path: /tmp/release.yaml